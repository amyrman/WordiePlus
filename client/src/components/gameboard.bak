import React, { useState, useEffect } from "react";
import "../styles/GameBoard.css";

function GameBoard(props) {
    const [desiredWordLength, setDesiredWordLength] = useState(props.desiredWordLength);
    const [activeRowIndex, setActiveRowIndex] = useState(0);
    const [activeColumnIndex, setActiveColumnIndex] = useState(0);

    const maxGuess = 6;

    const [pressedKeys, setPressedKeys] = useState(() =>
        Array(maxGuess)
            .fill()
            .map(() => Array(desiredWordLength).fill(null))
    );
    console.log("Pressed keys 1: " + pressedKeys);
    console.log("DesiredWordLength 1: " + desiredWordLength);

    useEffect(() => {
        const handleKeyDown = (event) => {
            if (event.key === "Enter") {
                const typedWord = pressedKeys[activeRowIndex].join("");
                console.log("typedWord: " + typedWord);
                console.log("pressedKeys: " + JSON.stringify(pressedKeys));
                // Send the guess word to the server if it has the correct number of letters
                fetch("/api/guess", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ guessWord: typedWord }),
                })
                    .then((response) => response.json())
                    .catch((error) => {
                        console.error(error);
                    });
            } else if (event.key === "Backspace") {

        };

        document.addEventListener("keydown", handleKeyDown);

        return () => {
            document.removeEventListener("keydown", handleKeyDown);
        };
    }, [activeColumnIndex, activeRowIndex, desiredWordLength, pressedKeys]);

    const handleDesiredWordLengthChange = (event) => {
        setDesiredWordLength(parseInt(event.target.value));
        setPressedKeys(
            Array(maxGuess)
                .fill()
                .map(() => Array(parseInt(event.target.value)).fill(null))
        );
    };

    return (
      <Grid desiredWordLength={desiredWordLength} maxGuess={maxGuess} />
    );
}

export default GameBoard;
